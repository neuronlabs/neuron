package query

import (
	"context"

	"github.com/stretchr/testify/mock"

	"github.com/neuronlabs/neuron-core/mapping"
	"github.com/neuronlabs/neuron-core/repository"
)

const (
	repoName = "mockery"
)

func init() {
	if err := repository.RegisterFactory(&Factory{}); err != nil {
		panic(err)
	}
}

/**

Factory

*/

// Factory is the repository.Factory mock implementation
type Factory struct {
	mock.Mock
}

// New creates new repository
// Implements repository.Factory method
func (f *Factory) New(s repository.Controller, model *mapping.ModelStruct) (repository.Repository, error) {
	return &Repository{}, nil
}

// DriverName returns the factory repository name
// Implements repository.Repository
func (f *Factory) DriverName() string {
	return repoName
}

// Close closes the factory
func (f *Factory) Close(ctx context.Context, done chan<- interface{}) {
	done <- struct{}{}
}

/**

Repository

*/

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Begin provides a mock function with given fields: ctx, s
func (_m *Repository) Begin(ctx context.Context, s *Scope) error {
	ret := _m.Called(ctx, s)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Scope) error); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close closes the repository connection
func (_m *Repository) Close(ctx context.Context) error {
	return nil
}

// Commit provides a mock function with given fields: ctx, s
func (_m *Repository) Commit(ctx context.Context, s *Scope) error {
	ret := _m.Called(ctx, s)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Scope) error); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, s
func (_m *Repository) Create(ctx context.Context, s *Scope) error {
	ret := _m.Called(ctx, s)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Scope) error); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, s
func (_m *Repository) Delete(ctx context.Context, s *Scope) error {
	ret := _m.Called(ctx, s)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Scope) error); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, s
func (_m *Repository) Get(ctx context.Context, s *Scope) error {
	ret := _m.Called(ctx, s)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Scope) error); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: ctx, s
func (_m *Repository) List(ctx context.Context, s *Scope) error {
	ret := _m.Called(ctx, s)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Scope) error); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Patch provides a mock function with given fields: ctx, s
func (_m *Repository) Patch(ctx context.Context, s *Scope) error {
	ret := _m.Called(ctx, s)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Scope) error); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Rollback provides a mock function with given fields: ctx, s
func (_m *Repository) Rollback(ctx context.Context, s *Scope) error {
	ret := _m.Called(ctx, s)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Scope) error); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FactoryName provides a mock function that implements FactoryName method.
func (_m *Repository) FactoryName() string {
	return repoName
}

func clearRepository(repo *Repository) {
	repo.Calls = []mock.Call{}
	repo.ExpectedCalls = []*mock.Call{}
}
